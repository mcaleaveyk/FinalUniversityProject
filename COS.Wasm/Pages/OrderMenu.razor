@page "/ordermenu"
@inject OrderService api
@inject NavigationManager NavigationManager
@inject IToastService toastService
@attribute [Authorize(Roles="Admin")]


<div class="table-responsive">
    <h3>Active Orders</h3>

    <div>
        <button @onclick="(() => GoToAllOrders())" class="mb-2 btn btn-info btn-sm">Get All Orders</button>
    </div>
    
    <table class="table table-striped table-sm">
        <thead class="thead-dark text-center" >
            <tr>
                <th>OrderId</th>
                <th>UserId</th>
                <th>Order Placed</th>
                <th class="text-center">Due For</th>
                <th class="text-center">Order Ready</th>
                <th class ="text-center">OrderFulfilled</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody class="text-center">
            @foreach(var s in Orders)
            {
                <tr>
                    <td>@s.Id</td>
                    <td>@s.UserId</td>
                    <td>@s.OrderTime.ToShortTimeString()</td>
                    <td class="text-center">@s.DueFor.ToString()</td>
                    <td class="text-center">
                        @if (s.FoodReady)
                        {
                            <button disabled=@IsTaskRunning @onclick="(() => MarkFoodAsReady(s))" class="btn btn-success btn-sm">
                                <span class="oi oi-check"></span> </button>
                        }
                        else
                        {
                            <button disabled=@IsTaskRunning @onclick="(()=> MarkFoodAsReady(s))" class="btn btn-danger btn-sm">
                                <span class="oi oi-x" ></span></button>
                        }
                    </td>
                    <td class="text-center">
                        @if (s.OrderFulfilled)
                        {
                            <button disabled=@IsTaskRunning @onclick="(() => MarkOrderAsFulfilled(s))" class="btn btn-success btn-sm">
                                <span class="oi oi-check"></span></button>
                        }
                        else
                        {
                            <button disabled=@IsTaskRunning @onclick="(()=> MarkOrderAsFulfilled(s))" class="btn btn-danger btn-sm">
                                <span class="oi oi-x" ></span></button>
                        }
                    </td>
                    <td><button @onclick="(() => ViewOrder(s.Id))" class="btn btn-info btn-sm">
                        <span class ="oi oi-magnifying-glass"></span></button>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
</div>


@code{
    private bool IsTaskRunning = false;
    private IList<Order> Orders = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        Orders = await api.GetActiveOrders();
    }

    protected async Task MarkFoodAsReady(Order order)
    {
        IsTaskRunning = true;

        await api.MarkFoodReady(order);
        Orders = await api.GetActiveOrders();

        IsTaskRunning = false;
    }
    protected async Task MarkOrderAsFulfilled(Order order)
    {
        IsTaskRunning = true;

        await api.MarkOrderFulfilled(order);
        Orders = await api.GetActiveOrders();

        IsTaskRunning = false;
    }

    private void GoToAllOrders()
    {
        NavigationManager.NavigateTo($"ordermenu/all");
    }


    private void ViewOrder(int id)
    {        
        NavigationManager.NavigateTo($"order/view/{id}");
    }

}